// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(BasePlugin) {
    var RSS, RssPlugin, fs;
    fs = require('fs');
    RSS = require('rss');
    return RssPlugin = (function(superClass) {
      extend(RssPlugin, superClass);

      function RssPlugin() {
        return RssPlugin.__super__.constructor.apply(this, arguments);
      }

      RssPlugin.prototype.name = 'rss';

      RssPlugin.prototype.config = {
        "default": {
          collection: 'html',
          url: '/rss.xml'
        }
      };


      /*
      		manage compatibility with previous versions of the plugins
      		TODO remove when deprecated
       */

      RssPlugin.prototype.fixOldConfigurationFormat = function(config) {
        var oldConf;
        if ((config.collection != null) || (config.url != null)) {
          oldConf = {
            collection: config.collection || 'html',
            url: config.url || '/rss.xml'
          };
          delete config.collection;
          delete config.url;
          config["default"] = oldConf;
          this.docpad.log('warn', 'docpad-plugin-rss configuration format has changed see the README.md for more informations');
          this.docpad.log('warn', "docpad-plugin-rss configuration must be changed to " + (JSON.stringify(config, null, 4)));
        }
        return config;
      };

      RssPlugin.prototype.getConfig = function() {
        var config;
        config = RssPlugin.__super__.getConfig.call(this);
        return this.fixOldConfigurationFormat(config);
      };

      RssPlugin.prototype.writeCollection = function(configName, collectionConfig) {
        var docpad, feed, feedCollection, feedPath, ref, site;
        docpad = this.docpad;
        site = docpad.getTemplateData().site;
        feedCollection = docpad.getCollection(collectionConfig.collection);
        feedPath = docpad.getConfig().outPath + collectionConfig.url;
        feed = new RSS({
          title: (ref = collectionConfig.title) != null ? ref : site.title,
          description: site.description,
          site_url: site.url,
          feed_url: site.url + collectionConfig.url,
          author: site.author,
          pubDate: site.date.toISOString()
        });
        feedCollection.first(10).forEach(function(document) {
          document = document.toJSON();
          return feed.item({
            title: document.title,
            author: document.author,
            description: document.contentRenderedWithoutLayouts,
            url: site.url + document.url,
            date: document.date.toISOString()
          });
        });
        fs.writeFileSync(feedPath, feed.xml(true));
        return docpad.log('debug', "Wrote the RSS " + configName + " xml file to: " + feedPath);
      };

      RssPlugin.prototype.writeAfter = function() {
        var collectionConfig, configName, ref, results;
        ref = this.getConfig();
        results = [];
        for (configName in ref) {
          if (!hasProp.call(ref, configName)) continue;
          collectionConfig = ref[configName];
          results.push(this.writeCollection(configName, collectionConfig));
        }
        return results;
      };

      return RssPlugin;

    })(BasePlugin);
  };

}).call(this);
