// Generated by CoffeeScript 1.9.1
(function() {
  require('docpad').require('testers').test({
    testerName: 'paged without cleanurls',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    autoExit: 'safe',
    removeWhitespace: true
  }, {
    enabledPlugins: {
      'cleanurls': false
    }
  }).test({
    testerName: 'paged without cleanurls with split disabled',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    autoExit: 'safe',
    outExpectedPath: __dirname + '/../test/out-expected-nosplit',
    removeWhitespace: true
  }, {
    enabledPlugins: {
      'cleanurls': false
    },
    plugins: {
      paged: {
        split: false
      }
    }
  }).test({
    testerName: 'paged without cleanurls with index',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-index',
    autoExit: 'safe',
    removeWhitespace: true
  }, {
    enabledPlugins: {
      'cleanurls': false
    },
    plugins: {
      paged: {
        index: 4
      }
    }
  }).test({
    testerName: 'paged without cleanurls with prefix',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-prefix',
    autoExit: 'safe',
    removeWhitespace: true
  }, {
    enabledPlugins: {
      'cleanurls': false
    },
    plugins: {
      paged: {
        prefix: 'page'
      }
    }
  }).test({
    testerName: 'paged with cleanurls',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean',
    autoExit: 'safe',
    removeWhitespace: true
  }).test({
    testerName: 'paged with cleanurls with split disabled',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean-nosplit',
    autoExit: 'safe',
    removeWhitespace: true
  }, {
    plugins: {
      paged: {
        split: false
      }
    }
  }).test({
    testerName: 'paged with cleanurls with index',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean-index',
    autoExit: 'safe',
    removeWhitespace: true
  }, {
    plugins: {
      paged: {
        index: 4
      }
    }
  }).test({
    testerName: 'paged with cleanurls with prefix',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean-prefix',
    autoExit: 'safe',
    removeWhitespace: true
  }, {
    plugins: {
      paged: {
        prefix: 'page'
      }
    }
  }).test({
    testerName: 'paged with cleanurls on static',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean-static',
    removeWhitespace: true
  }, {
    env: 'static',
    plugins: {
      paged: {
        index: 0
      }
    }
  }).test({
    testerName: 'paged with cleanurls on static with split disabled',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean-static-nosplit',
    removeWhitespace: true
  }, {
    env: 'static',
    plugins: {
      paged: {
        split: false,
        index: 0
      }
    }
  }).test({
    testerName: 'paged with cleanurls on static with index',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean-static-index',
    removeWhitespace: true
  }, {
    env: 'static',
    plugins: {
      paged: {
        index: 4
      }
    }
  }).test({
    testerName: 'paged with cleanurls on static with prefix',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean-static-prefix',
    removeWhitespace: true
  }, {
    env: 'static',
    plugins: {
      paged: {
        prefix: 'page'
      }
    }
  }).test({
    testerName: 'paged with cleanurls on static with compatibility off',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean-static-nocompat',
    removeWhitespace: true
  }, {
    env: 'static',
    plugins: {
      paged: {
        compatibility: false
      }
    }
  }).test({
    testerName: 'paged with cleanurls on static with non-backwards compatible format',
    testerClass: 'RendererTester',
    pluginPath: __dirname + '/..',
    pluginName: 'paged',
    outExpectedPath: __dirname + '/../test/out-expected-clean-static-noback',
    removeWhitespace: true
  }, {
    env: 'static',
    plugins: {
      paged: {
        split: false,
        index: 1,
        prefix: '',
        compatibility: true
      }
    }
  });

}).call(this);
