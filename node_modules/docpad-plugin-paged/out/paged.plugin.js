// Generated by CoffeeScript 1.9.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(BasePlugin) {
    var PagedPlugin, TaskGroup, path;
    TaskGroup = require('taskgroup').TaskGroup;
    path = require('path');
    return PagedPlugin = (function(superClass) {
      extend(PagedPlugin, superClass);

      function PagedPlugin() {
        return PagedPlugin.__super__.constructor.apply(this, arguments);
      }

      PagedPlugin.prototype.name = 'paged';

      PagedPlugin.prototype.config = {
        split: true,
        index: 1,
        prefix: '',
        compatibility: true
      };

      PagedPlugin.prototype.extendCollections = function(opts) {
        var docpad, me;
        me = this;
        docpad = this.docpad;
        docpad.getFiles({
          isPaged: true,
          isPagedAuto: {
            $ne: true
          }
        }).on('remove', function(model) {
          return me.removePagesFor(model);
        });
        return this;
      };

      PagedPlugin.prototype.extendTemplateData = function(opts) {
        var docpad, templateData;
        docpad = this.docpad;
        templateData = opts.templateData;
        templateData.getPageCollection = function(collectionName, start, finish) {
          var collection, ref, ref1, subCollection;
          if (collectionName == null) {
            collectionName = 'html';
          }
          collection = this.getCollection(collectionName);
          if (start == null) {
            start = ((ref = this.document.page) != null ? ref.startIdx : void 0) || 0;
          }
          if (finish == null) {
            finish = ((ref1 = this.document.page) != null ? ref1.endIdx : void 0) || collection.models.length;
          }
          subCollection = new docpad.FilesCollection(collection.models.slice(start, finish));
          return subCollection;
        };
        templateData.getPagedUrl = function(pageNumber, document) {
          var err, page, pageDocument, pageId, pageUrl, ref, relativePath;
          if (document == null) {
            document = this.getDocument();
          }
          page = document.get('page');
          if (pageNumber == null) {
            pageNumber = (ref = page != null ? page.number : void 0) != null ? ref : 0;
          }
          pageId = page.pages[pageNumber];
          pageDocument = docpad.getFileById(pageId);
          if (pageDocument == null) {
            relativePath = document.get('relativePath');
            err = "Could not find document with id " + pageId + " that is page " + pageNumber + " of " + relativePath;
            docpad.error(err);
            pageUrl = err;
          } else {
            pageUrl = pageDocument.get('url');
          }
          return pageUrl;
        };
        if (typeof templateData.getPageUrl !== 'function') {
          templateData.getPageUrl = templateData.getPagedUrl;
          docpad.log('warning', "docpad-plugin-paged: getPageUrl is deprecated and may clash with other plugins. Use getPagedUrl instead.");
        } else {
          docpad.log('warning', "docpad-plugin-paged: getPageUrl is already defined by another plugin. Use getPagedUrl instead.");
        }
        templateData.hasNextPage = function(document) {
          var has, page;
          if (document == null) {
            document = this.getDocument();
          }
          page = document.get('page');
          has = page.number < page.count - 1;
          return has;
        };
        templateData.getNextPage = function(document) {
          var page, result;
          if (document == null) {
            document = this.getDocument();
          }
          page = document.get('page');
          result = '#';
          if (page.number < page.count - 1) {
            result = this.getPagedUrl(page.number + 1, document);
          }
          return result;
        };
        templateData.hasPrevPage = function(document) {
          var has, page;
          if (document == null) {
            document = this.getDocument();
          }
          page = document.get('page');
          has = page.number > 0;
          return has;
        };
        templateData.getPrevPage = function(document) {
          var page, result;
          if (document == null) {
            document = this.getDocument();
          }
          page = document.get('page');
          result = '#';
          if (page.number > 0) {
            result = this.getPagedUrl(page.number - 1, document);
          }
          return result;
        };
        return true;
      };

      PagedPlugin.prototype.removePagesFor = function(document, collection, next) {
        var database, docpad, filePath, pages, ref, tasks;
        docpad = this.docpad;
        database = docpad.getDatabase();
        filePath = document.getFilePath();
        pages = ((ref = document.get('page')) != null ? ref.pages : void 0) || [];
        if (pages.length === 0) {
          if (typeof next === "function") {
            next();
          }
          return this;
        }
        docpad.log('debug', "Remove pages for:", filePath);
        tasks = new TaskGroup().once('completed', function(err) {
          if (err) {
            return typeof next === "function" ? next(err) : void 0;
          }
          docpad.log('debug', "Removed pages for:", filePath);
          return typeof next === "function" ? next() : void 0;
        });
        pages.forEach(function(pageId) {
          var pageDocument;
          if (pageId === document.id) {
            return;
          }
          pageDocument = database.get(pageId);
          if (!pageDocument) {
            return;
          }
          if (collection != null) {
            collection.remove(pageDocument);
          }
          database.remove(pageDocument);
          return tasks.addTask(function(complete) {
            return pageDocument["delete"](complete);
          });
        });
        tasks.run();
        return this;
      };

      PagedPlugin.prototype.renderBeforePriority = 550;

      PagedPlugin.prototype.renderBefore = function(opts, next) {
        var collection, config, database, docpad, me, newPagesToRender, sourcePageDocuments, tasks, templateData;
        me = this;
        docpad = this.docpad;
        collection = opts.collection, templateData = opts.templateData;
        database = docpad.getDatabase();
        config = this.config;
        newPagesToRender = [];
        sourcePageDocuments = collection.findAll({
          isPaged: true,
          isPagedAuto: {
            $ne: true
          }
        });
        if (sourcePageDocuments.length === 0) {
          next();
          return this;
        }
        docpad.log('info', "Adding pages for " + sourcePageDocuments.length + " documents...");
        tasks = new TaskGroup().once('completed', function(err) {
          if (err) {
            return next(err);
          }
          docpad.log('info', "Added pages");
          return next();
        });
        sourcePageDocuments.forEach(function(document) {
          return tasks.addTask(function(complete) {
            return me.removePagesFor(document, collection, complete);
          });
        });
        sourcePageDocuments.forEach(function(document) {
          return tasks.addGroup(function(addGroup, addTask) {
            var basename, extension, filePath, filename, i, lastDoc, meta, numberOfPages, outBasename, outExtension, outFilename, pageSize, pagedCollection, pagedCollectionName, pages, relativePath, results, url;
            meta = document.getMeta();
            numberOfPages = meta.get('pageCount') || 1;
            pageSize = meta.get('pageSize') || 1;
            lastDoc = pageSize * numberOfPages;
            if (meta.get('pagedCollection')) {
              pagedCollectionName = meta.get('pagedCollection');
              pagedCollection = docpad.getCollection(pagedCollectionName);
              numberOfPages = Math.ceil(pagedCollection.length / pageSize);
              lastDoc = pagedCollection.length;
            }
            filePath = document.getFilePath();
            relativePath = document.get('relativePath');
            filename = document.get('filename');
            basename = document.get('basename');
            extension = document.get('extensions').join('.');
            outFilename = document.get('outFilename');
            outBasename = document.get('outBasename');
            outExtension = document.get('outExtension');
            url = document.get('url');
            pages = [document.id];
            document.set({
              isPaged: true,
              isPagedAuto: false,
              isPagedFor: false,
              page: {
                count: numberOfPages,
                size: pageSize,
                number: 0,
                startIdx: 0,
                endIdx: Math.min(pageSize, lastDoc),
                pages: pages
              }
            });
            if (numberOfPages > 1) {
              return (function() {
                results = [];
                for (var i = 1; 1 <= numberOfPages ? i < numberOfPages : i > numberOfPages; 1 <= numberOfPages ? i++ : i--){ results.push(i); }
                return results;
              }).apply(this).forEach(function(pageNumber) {
                return addTask(function(complete) {
                  var newPageNumber, pageDocument, pageFilename, pageOutFilename, pagePathBasename, pageRelativePath, ref, secondaryOutFilename, secondaryUrl, validForRedirect;
                  newPageNumber = pageNumber + config.index;
                  if (config.split) {
                    pageFilename = "index." + extension;
                    pageOutFilename = "index." + outExtension;
                    pagePathBasename = basename === 'index' ? '' : basename;
                    pageRelativePath = path.join(path.dirname(relativePath), pagePathBasename, config.prefix, newPageNumber.toString(), pageFilename);
                  } else {
                    pageFilename = basename + "-" + config.prefix + newPageNumber + "." + extension;
                    pageOutFilename = outBasename + "." + config.prefix + newPageNumber + "." + outExtension;
                    pageRelativePath = relativePath.replace(filename, pageFilename);
                  }
                  docpad.log('info', "Creating page " + pageNumber + " for " + filePath + " at " + pageRelativePath);
                  pageDocument = (ref = typeof docpad.cloneModel === "function" ? docpad.cloneModel(document) : void 0) != null ? ref : document.clone();
                  pageDocument.attributes.urls = [];
                  pageDocument.set({
                    isPagedAuto: true,
                    isPagedFor: document.id,
                    page: {
                      count: numberOfPages,
                      size: pageSize,
                      number: pageNumber,
                      startIdx: pageNumber * pageSize,
                      endIdx: Math.min(pageNumber * pageSize + pageSize, lastDoc),
                      pages: pages
                    }
                  });
                  pageDocument.setMeta({
                    fullPath: null,
                    relativePath: pageRelativePath,
                    filename: pageFilename,
                    outFilename: pageOutFilename
                  });
                  if (config.compatibility) {
                    secondaryOutFilename = basename + "." + pageNumber + "." + outExtension;
                    secondaryUrl = relativePath.replace(filename, secondaryOutFilename).replace("\\", "/");
                    validForRedirect = !config.split && config.index !== 0 && config.prefix === "";
                    if (!validForRedirect && secondaryOutFilename !== pageOutFilename) {
                      pageDocument.addUrl("/" + secondaryUrl);
                      docpad.log('info', "Created secondary url structure for " + pageOutFilename + " at /" + secondaryUrl);
                    } else {
                      docpad.log('warning', "Unable to create secondary url structure for " + pageOutFilename + " at /" + secondaryUrl);
                    }
                  }
                  return pageDocument.normalize(function(err) {
                    var pageFilePath;
                    if (err) {
                      return complete(err);
                    }
                    pageFilePath = pageDocument.getFilePath();
                    docpad.log('debug', "Adding page " + pageNumber + " for " + filePath + " at " + pageFilePath);
                    pages.push(pageDocument.id);
                    collection.add(pageDocument);
                    database.add(pageDocument);
                    docpad.log('debug', "Created and added page " + pageNumber + " for " + filePath + " at " + pageFilePath);
                    return complete();
                  });
                });
              });
            }
          });
        });
        tasks.run();
        return true;
      };

      return PagedPlugin;

    })(BasePlugin);
  };

}).call(this);
